/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app.Teacher;

import app.Subject.*;
import app.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class WindowTeacher_Add extends javax.swing.JFrame {

    /**
     * Creates new form ClasseAddDelWindow
     */
    public WindowTeacher_Add() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        fillSubjectComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TextName = new javax.swing.JTextField();
        ButtonAdd = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        SubjectCombo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        TextName1 = new javax.swing.JTextField();
        newBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(19, 21, 25));

        jLabel1.setFont(new java.awt.Font("Renitah", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(154, 154, 154));
        jLabel1.setText("Add Teacher");

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(154, 154, 154));
        jLabel2.setText("Teacher Name:");

        TextName.setBackground(new java.awt.Color(51, 57, 67));
        TextName.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        TextName.setForeground(new java.awt.Color(154, 154, 154));
        TextName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextNameActionPerformed(evt);
            }
        });

        ButtonAdd.setBackground(new java.awt.Color(51, 57, 67));
        ButtonAdd.setFont(new java.awt.Font("Noto Sans", 2, 15)); // NOI18N
        ButtonAdd.setForeground(new java.awt.Color(154, 154, 154));
        ButtonAdd.setText("Add");
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });

        Back.setBackground(new java.awt.Color(51, 57, 67));
        Back.setFont(new java.awt.Font("Noto Sans", 2, 15)); // NOI18N
        Back.setForeground(new java.awt.Color(154, 154, 154));
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(154, 154, 154));
        jLabel4.setText("Existing Subject:");

        SubjectCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(154, 154, 154));
        jLabel3.setText("New Subject:");

        TextName1.setBackground(new java.awt.Color(51, 57, 67));
        TextName1.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        TextName1.setForeground(new java.awt.Color(154, 154, 154));
        TextName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextName1ActionPerformed(evt);
            }
        });

        newBox.setForeground(new java.awt.Color(154, 154, 154));
        newBox.setText("Add a new Subject");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(ButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TextName1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(TextName, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SubjectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(98, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(194, 194, 194))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(newBox)
                        .addGap(28, 28, 28))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TextName, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TextName1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newBox)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(SubjectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextNameActionPerformed

    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddActionPerformed
        String nomProf = TextName.getText().trim();
        String profMatiere;

        if (!NewSubject()) {
            profMatiere = SubjectCombo.getSelectedItem().toString();

            // Vérifiez si le champ de texte n'est pas vide
            if (!nomProf.isEmpty()) {
                try {
                    // Obtenez une connexion à la base de données
                    Connection connection = Connector.getConnection();

                    // Vérifiez si la classe existe déjà
                    if (!profExists(connection, nomProf)) {
                        // Si le  n'existe pas, ajoutez-la à la base de données
                        addProf(connection, nomProf, profMatiere);
                        upMatiere(connection, profMatiere, nomProf);
                        

                        // Affichez une boîte de dialogue de succès
                        javax.swing.JOptionPane.showMessageDialog(this, "Le Prof '" + nomProf + "' a été ajoutée avec succès.");

                        // Fermez la connexion à la base de données
                        Connector.closeConnection(connection);
                    } else {
                        // Si la classe existe déjà, affichez une boîte de dialogue d'erreur
                        javax.swing.JOptionPane.showMessageDialog(this, "Erreur : Le Prof '" + nomProf + "' existe déjà.");
                    }
                } catch (SQLException e) {
                    // En cas d'erreur de base de données, affichez un message d'erreur
                    javax.swing.JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout du Prof : " + e.getMessage());
                }
            } else {
                // Si le champ de texte est vide, affichez un message d'erreur
                javax.swing.JOptionPane.showMessageDialog(this, "Veuillez entrer le nom du prof.");
            }
        } else {
            profMatiere = TextName1.getText().trim();

            // Vérifiez si le champ de texte n'est pas vide
            if (!nomProf.isEmpty()) {
                try {
                    // Obtenez une connexion à la base de données
                    Connection connection = Connector.getConnection();

                    // Vérifiez si la classe existe déjà
                    if (!profExists(connection, nomProf)) {
                        addMatiere(connection, profMatiere, nomProf);
                        // Si la classe n'existe pas, ajoutez-la à la base de données
                        addProf(connection, nomProf, profMatiere);

                        // Affichez une boîte de dialogue de succès
                        javax.swing.JOptionPane.showMessageDialog(this, "Le Prof '" + nomProf + "' a été ajoutée avec succès.");

                        // Fermez la connexion à la base de données
                        Connector.closeConnection(connection);
                    } else {
                        // Si la classe existe déjà, affichez une boîte de dialogue d'erreur
                        javax.swing.JOptionPane.showMessageDialog(this, "Erreur : Le Prof '" + nomProf + "' existe déjà.");
                    }
                } catch (SQLException e) {
                    // En cas d'erreur de base de données, affichez un message d'erreur
                    javax.swing.JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout du Prof : " + e.getMessage());
                }
            } else {
                // Si le champ de texte est vide, affichez un message d'erreur
                javax.swing.JOptionPane.showMessageDialog(this, "Veuillez entrer le nom du prof.");
            }

        }
    }//GEN-LAST:event_ButtonAddActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        WindowTeacher_Choice ch = new WindowTeacher_Choice();
        ch.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackActionPerformed

    private void TextName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextName1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowTeacher_Add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowTeacher_Add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowTeacher_Add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowTeacher_Add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowTeacher_Add().setVisible(true);
            }
        });
    }

    private boolean profExists(Connection connection, String nomProf) throws SQLException {
        // Utilisez une requête SQL pour vérifier l'existence de la classe
        String query = "SELECT COUNT(*) FROM prof WHERE nom_prof = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, nomProf);
            ResultSet resultSet = statement.executeQuery();
            resultSet.next();
            int count = resultSet.getInt(1);
            return count > 0;
        }
    }
    // Méthode pour ajouter une nouvelle classe à la base de données

    private void addProf(Connection connection, String nomProf, String profMatiere) throws SQLException {
        // Utilisez une requête SQL pour insérer la nouvelle matière avec son enseignant
        String query = "INSERT INTO prof (nom_prof, matiere_prof) VALUES (?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, nomProf);
            statement.setString(2, profMatiere);
            statement.executeUpdate();
        }
    }

    private void fillSubjectComboBox() {
        try {
            // Obtenez une connexion à la base de données
            Connection connection = Connector.getConnection();

            // Récupérez les données de la base de données (noms des classes)
            List<String> matieres = getMatiereFromDatabase(connection);

            // Ajoutez les classes à la JComboBox
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(matieres.toArray(new String[0]));
            SubjectCombo.setModel(model);

            // Fermez la connexion à la base de données
            Connector.closeConnection(connection);
        } catch (SQLException e) {
            // En cas d'erreur de base de données, affichez un message d'erreur
            JOptionPane.showMessageDialog(this, "Erreur lors du chargement des classes : " + e.getMessage());
        }
    }

    private List<String> getMatiereFromDatabase(Connection connection) throws SQLException {
        List<String> matieres = new ArrayList<>();
        String query = "SELECT nom_matiere FROM matieres";
        try (PreparedStatement statement = connection.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                String matiere = resultSet.getString("nom_matiere");
                matieres.add(matiere);
            }
        }
        return matieres;
    }

    private boolean NewSubject() {
        return newBox.isSelected();
    }

    private void addMatiere(Connection connection, String nomMatiere, String enseignantMatiere) throws SQLException {
        // Utilisez une requête SQL pour insérer la nouvelle matière avec son enseignant
        String query = "INSERT INTO matieres (nom_matiere, enseignant_matiere) VALUES (?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, nomMatiere);
            statement.setString(2, enseignantMatiere);
            statement.executeUpdate();
        }
    }

    private void upMatiere(Connection connection, String nomMatiere, String newProf) throws SQLException {
        // Utilisez une requête SQL pour mettre à jour la matière
        String query = "UPDATE matieres SET enseignant_matiere = ? WHERE nom_matiere = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, newProf);
            statement.setString(2, nomMatiere);
            statement.executeUpdate();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JComboBox<String> SubjectCombo;
    private javax.swing.JTextField TextName;
    private javax.swing.JTextField TextName1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox newBox;
    // End of variables declaration//GEN-END:variables
}
